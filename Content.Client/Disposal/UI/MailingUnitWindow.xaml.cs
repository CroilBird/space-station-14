using Content.Shared.Disposal;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Disposal.UI
{
    /// <summary>
    /// Client-side UI used to control a <see cref="MailingUnitComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class MailingUnitWindow : DefaultWindow
    {
        public TimeSpan FullPressure;

        public MailingUnitWindow()
        {
            RobustXamlLoader.Load(this);
        }

        /// <summary>
        /// Update the interface state for the disposals window.
        /// </summary>
        /// <returns>true if we should stop updating every frame.</returns>
        public void UpdateState(MailingUnitBoundUserInterfaceState state)
        {
            // we will handle the mail part first so we can just exit if that's all we are doing
            // later on
            Title = Loc.GetString("ui-mailing-unit-window-title", ("tag", state.Tag ?? " "));

            Target.Text = state.Target;

            TargetListContainer.Clear();
            foreach (var target in state.TargetList)
            {
                TargetListContainer.AddItem(target);
            }

            // optionally handle the disposal state if it's not null
            // this will be null if we're updating the UI for the mailUnit component only
            if (state.DisposalState == null)
                return;

            var disposalState = state.DisposalState;

            UnitState.Text = disposalState.UnitState;
            Power.Pressed = disposalState.Powered;
            Engage.Pressed = disposalState.Engaged;
            FullPressure = disposalState.FullPressureTime;
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);
            PressureBar.UpdatePressure(FullPressure);
        }
    }
}
